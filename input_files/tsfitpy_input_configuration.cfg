[turbospectrum_compiler]
# The compiler used to compile turbospectrum. intel or gnu or m3dis
compiler = intel

[MainPaths]
# Main paths for the input and output files
code_path = /Users/storm/PycharmProjects/3d_nlte_stuff/m3dis_l/m3dis/experiments/Multi3D/
interpolators_path = ./scripts/model_interpolators/
line_list_path = ./input_files/linelists/linelist_for_fitting/
model_atmosphere_grid_path_1d = ./input_files/model_atmospheres/1D/
model_atmosphere_grid_path_3d = ./input_files/model_atmospheres/3D/
model_atoms_path = ./input_files/nlte_data/model_atoms/
departure_file_path = ./input_files/nlte_data/
departure_file_config_path = ./input_files/nlte_data/nlte_filenames.cfg
output_path = ./output_files/
linemasks_path = ./input_files/linemask_files/
spectra_input_path = ./input_files/observed_spectra/
fitlist_input_path = ./input_files/
temporary_directory_path = ./temp_directory/

[FittingParameters]
# Atmosphere type. ('1D' / '3D')
atmosphere_type = 1D
# Fit mode: ('all' / 'lbl' / 'teff' / 'vmic')
fitting_mode = lbl
# Whether or not molecules are included in the fit ('True' / 'False')
include_molecules = True
# Whether to use nlte or not. ('True' or 'False')
nlte = False
# Whether or not mAcroturbulence is fit as a parameter or taken from the value below ('Yes' / "No" / "Input")
# If set to 'No', mAcroturbulence is taken from the value below
# If set to 'Input', mAcroturbulence is taken from the fitlist
fit_vmac = Yes
# Whether to fit mIcroturbulence or not. Only works in lbl mode. ('Yes' / 'No' / 'Input')
# If set to 'No', mIcroturbulence is calculated based on Teff and loggq
# If set to 'Input', mIcroturbulence is taken from the fitlist
fit_vmic = No
#whether to fit rotation or use the one below as a constant for all of them (Yes / No)
fit_rotation = No
# Elements to fit. (E.g. 'Fe Ca Mg'). Fits all elements within the linemask
element_to_fit = Fe
# Elements to have in NLTE (just choose whichever elements you want to have in NLTE)
# nlte_elements = Mg Ca Fe
nlte_elements = Fe
# Linemask file. The line is fitted within bounds of the linemask
linemask_file = Fe/fe-lmask_test.txt
# Wavelength delta for the generated spectra [AA]
wavelength_delta = 0.005
# Segment size for the each line. Too small might not include wings from other lines
# Larger segment size will be slower. [AA], recommended to keep at 3-5
segment_size = 4

[ExtraParameters]
# Extra parameters
# Debug mode. If 1, will print more Python output. If 2, will print more Fortran output. Recommended to keep at 0
debug_mode = 0
# Number of CPUs to use for the fit (1 = no parallelisation). If 0, will use all available CPUs
number_of_cpus = 1
# Experimental. ('True' / 'False')
# True - can use several CPUs for one spectrum, but might not work for all Dask versions
experimental_parallelisation = False
# Name of the cluster (if not launched locally), only used for printing purposes
cluster_name =

[InputAndOutputFiles]
# Input and output files
# Fitlist file name. Contains the input spectra and atmospheric parameters
input_filename = fitlist
# Name of the output file (not folder)
output_filename = output

[SpectraParameters]
# Resolution of the spectra (lambda_center/FWHM). If 0, no convolution is done
resolution = 0
# Macroturbulence [km/s] for all spectra, only used if fit_vmac = 'No'
vmac = 0.0
# Rotation [km/s] for all spectra, only used if fit_rotation = 'No'
rotation = 0.0
# If you want to fit with a certain initial guess for an element, can write which element it is and where the file is
# E.g. if you want to fit with a guess of Mg, can write
# init_guess_elem = Mg
# init_guess_elem_location = location/mg.txt
init_guess_elements =
init_guess_elements_path =
# If you know the abundance of an element, can write which element it is and where the file is
# E.g. if you know the abundance of Ti, can write
# input_elem_abundance = Ti
# input_elem_abundance_location = location/ti.txt
input_elements_abundance =
input_elements_abundance_path =

[ParametersForModeAll]
# Parameters for mode = 'all' [AA]
wavelength_min = 5300
wavelength_max = 5700

[ParametersForModeLbl]
# Parameters for mode = 'lbl'
# Bounds and guess ranges for the microturbulence
# km/s, can never be less than 0, mIIIIcro
bounds_vmic = 0.01 5
# km/s, can never be less than 0, mIIIIcro
guess_range_vmic = 0.9 1.3
# if you want to also find upper limit after fit by varying abundance, change it here
find_upper_limit = False
# how many sigma to use for upper limit
upper_limit_sigma = 1

[ParametersForModeTeff]
# Parameters for mode = 'teff'
# Hard bounds for Teff. If the fit results in a Teff outside of these bounds, the fit is rejected
bounds_teff = 2500 8000
# Guess range for teff, from which the initial guesses are made. The guesses are made by taking the input Teff +/- guess_range_teff
guess_range_teff = -200 200
# Find errors for Teff. If True, will find the error (in 1 direction only) for Teff by varying Teff and finding the chi2
find_teff_errors = False
# How many sigma to use for Teff errors
teff_error_sigma = 1

[ParametersForModeLogg]
# Parameters for mode = 'logg'
# Hard bounds for logg. If the fit results in a logg outside of these bounds, the fit is rejected
bounds_logg = -0.5 5.5
# Guess range for logg, from which the initial guesses are made. The guesses are made by taking the input logg +/- guess_range_logg
guess_range_logg = -0.25 0.25
# Find errors for logg. If True, will find the error (in 1 direction only) for logg by varying logg and finding the chi2; most likely doesn't work atm
find_logg_errors = False
# How many sigma to use for logg errors
logg_error_sigma = 1

[Bounds]
#bounds for the minimisation -> HARD BOUND, will NEVER fit outside these bounds
# km/s, can never be less than 0, mAAAAcro
bounds_vmac = 0 15
# km/s, can never be less than 0, NOT USED IN MODE = 'all'
bounds_rotation = 0 15
# [X/Fe]
bounds_abundance = -40 100
# [Fe/H], hard bounds set by model atmosphere grid
bounds_feh = -5 1.0
# km/s, too high might result in fits of wrong lines
# Added to RV of the star, so if the star has a RV of 10 km/s, and the fit has a RV of 2 km/s, the total RV is 12 km/s
bounds_doppler = -2 2

[GuessRanges]
# Guess ranges for the minimisation -> GUESS ONLY. CAN fit outside, but depending on variable (especially abund/micro),
# may never fit outside guesses
# km/s, can never be less than 0, mAAAAcro
guess_range_vmac = 0.2 8.0
# km/s, can never be less than 0, NOT USED IN MODE = 'all'
guess_range_rotation = 0.2 2.0
# [X/Fe] or [Fe/H]
guess_range_abundance = -1 0.4
# km/s
guess_range_doppler = -2 2

[SlurmClusterParameters]
# Parameters for the Slurm cluster
# Type of cluster. Can be 'slurm' or 'local'. 'local' ignores the other parameters
cluster_type = local
# Number of nodes to use, cpus are taken from the number_of_cpus parameter
number_of_nodes = 1
# Memory per CPU in GB
memory_per_cpu_gb = 3.6
# Commands to run before the script. Each command is separated by a semicolon. example below purges the modules and loads the ones needed
script_commands = module purge;module load basic-path;module load intel;module load anaconda3-py3.10
# Time limit for the job in hours
time_limit_hours = 167
# Partition to use in the cluster passed to the --partition flag
partition = debug

[m3disParameters]
# Parameters for the m3dis code
# Number of different nu points (less = faster, but more memory)
n_nu = 1
# Less = faster, but might need higher for 3D or NLTE
# 1D NLTE - 100 seems to work, 1D LTE - 10 or less?
hash_table_size = 100
# Number of cores to use for each separate m3dis run (leave it at 1 for 1D)
mpi_cores = 1
# Only NLTE parameters, iterations is how many times to iterate, convlim is the convergence limit
# iterations_max_precompute is how many times to iterate when precomputing the departure coefficients
# iterations_max is how many times to iterate when fitting when using precomputed departure coefficients (recommended lower than iterations_max_precompute)
iterations_max_precompute = 10
iterations_max = 3
convlim = 0.01
# Only 3D parameters, snap is the snapshot number, dims is the number of dimensions, nx, ny, nz are the resolution of the model (if Stagger)
snap = 1
dims = 23
nx = 10
ny = 10
nz = 230

[AdvancedOptions]
# Only change these if you know what you're doing!!
# scipy xatol and fatol for the minimisation, different methods
xatol_all = 0.05
fatol_all = 0.05
xatol_lbl = 0.0001
fatol_lbl = 0.00001
xatol_teff = 0.01
fatol_teff = 0.01
xatol_logg = 0.00001
fatol_logg = 0.00001
xatol_vmic = 0.005
fatol_vmic = 0.000001
# scipy maxfev for the minimisation
maxfev = 50
# Value of lpoint for turbospectrum in spectrum.inc file
lpoint_turbospectrum = 1000000
# m3dis parameters
m3dis_python_package_name = m3dis
# margin in AA of how much observed spectra to keep when cutting out the line
margin = 3
# adds this much randomness to the guess ratio wise to the guess for the parameters. 0 means guess is the same as the input
guess_ratio_to_add = 0